

---

### 1. **Introduction to PHP**
- **What is PHP?**
  - PHP stands for Hypertext Preprocessor.
  - Itâ€™s a server-side scripting language used to create dynamic web pages.
  - PHP code is executed on the server, and the result is sent to the browser as plain HTML.

- **Setting Up the Development Environment**
  - You need a web server (Apache), PHP, and a database (MySQL).
  - Use XAMPP, WAMP, or MAMP to install them easily.

---

### 2. **Basic PHP Syntax**
- **PHP Tags**
  - PHP code starts with `<?php` and ends with `?>`.
  - Example: 
    ```php
    <?php
    echo "Hello, World!";
    ?>
    ```

- **Echo and Print**
  - Use `echo` or `print` to output data.
  - Example:
    ```php
    echo "Hello, World!";
    ```

- **Comments**
  - Single-line: `//` or `#`
  - Multi-line: `/* */`
  - Example:
    ```php
    // This is a single-line comment
    # Another single-line comment
    /* This is a
       multi-line comment */
    ```

---

### 3. **Variables and Data Types**
- **Variables**
  - Variables in PHP start with a `$` sign.
  - Example:
    ```php
    $name = "John";
    $age = 25;
    ```

- **Data Types**
  - Common types: String, Integer, Float, Boolean, Array, Object.
  - Example:
    ```php
    $string = "Hello";
    $int = 10;
    $float = 10.5;
    $bool = true;
    $array = ["apple", "banana"];
    ```

- **Variable Scope**
  - Variables can be local, global, or superglobal (`$_POST`, `$_GET`, etc.).
  - Example:
    ```php
    $x = 5; // global scope

    function myTest() {
      $y = 10; // local scope
      echo $x; // error
    }

    myTest();
    ```

---

### 4. **Operators**
- **Arithmetic Operators**
  - `+`, `-`, `*`, `/`, `%` (modulus)
  - Example:
    ```php
    $sum = 5 + 3;
    ```

- **Assignment Operators**
  - `=`, `+=`, `-=`, `*=`, `/=`
  - Example:
    ```php
    $x = 10;
    $x += 5; // $x is now 15
    ```

- **Comparison Operators**
  - `==`, `===`, `!=`, `!==`, `<`, `>`, `<=`, `>=`
  - Example:
    ```php
    $a = 5;
    $b = 10;
    var_dump($a == $b); // false
    ```

- **Logical Operators**
  - `&&`, `||`, `!`
  - Example:
    ```php
    $a = true;
    $b = false;
    var_dump($a && $b); // false
    ```

---

### 5. **Control Structures**
- **Conditional Statements**
  - `if`, `else`, `elseif`, `switch`
  - Example:
    ```php
    $age = 20;
    if ($age < 18) {
      echo "Child";
    } elseif ($age < 65) {
      echo "Adult";
    } else {
      echo "Senior";
    }
    ```

- **Loops**
  - `while`, `do-while`, `for`, `foreach`
  - Example:
    ```php
    $x = 1;
    while ($x <= 5) {
      echo "Number: $x ";
      $x++;
    }
    ```

- **Break and Continue**
  - `break` exits a loop, `continue` skips to the next iteration.
  - Example:
    ```php
    for ($i = 0; $i < 10; $i++) {
      if ($i == 3) {
        break;
      }
      echo $i;
    }
    ```

---

### 6. **Functions**
- **Defining and Calling Functions**
  - Functions are blocks of code that can be reused.
  - Example:
    ```php
    function greet($name) {
      return "Hello, $name!";
    }

    echo greet("John");
    ```

- **Function Arguments**
  - Pass values to functions as arguments.
  - Example:
    ```php
    function add($a, $b) {
      return $a + $b;
    }
    echo add(2, 3); // 5
    ```

- **Return Values**
  - Functions can return values using `return`.
  - Example:
    ```php
    function multiply($a, $b) {
      return $a * $b;
    }
    echo multiply(4, 5); // 20
    ```

---

### 7. **Arrays**
- **Indexed Arrays**
  - Arrays with numeric keys.
  - Example:
    ```php
    $fruits = ["apple", "banana", "cherry"];
    echo $fruits[1]; // banana
    ```

- **Associative Arrays**
  - Arrays with named keys.
  - Example:
    ```php
    $ages = ["John" => 25, "Jane" => 30];
    echo $ages["Jane"]; // 30
    ```

- **Multidimensional Arrays**
  - Arrays containing other arrays.
  - Example:
    ```php
    $cars = [
      ["Volvo", 22, 18],
      ["BMW", 15, 13],
    ];
    echo $cars[0][0]; // Volvo
    ```

- **Array Functions**
  - Useful functions like `array_push()`, `array_pop()`, `array_merge()`.
  - Example:
    ```php
    $array = [1, 2, 3];
    array_push($array, 4);
    print_r($array); // [1, 2, 3, 4]
    ```

---

### 8. **String Manipulation**
- **String Functions**
  - `strlen()`, `strpos()`, `substr()`, `str_replace()`, etc.
  - Example:
    ```php
    $text = "Hello World";
    echo strlen($text); // 11
    ```

- **Concatenation**
  - Joining strings with `.` operator.
  - Example:
    ```php
    $greeting = "Hello " . "World";
    echo $greeting; // Hello World
    ```

- **String Interpolation**
  - Embedding variables within strings.
  - Example:
    ```php
    $name = "John";
    echo "Hello, $name!"; // Hello, John!
    ```

---

### 9. **Forms and User Input**
- **Forms in HTML**
  - Use forms to collect user input.
  - Example:
    ```html
    <form method="post" action="submit.php">
      Name: <input type="text" name="name">
      <input type="submit">
    </form>
    ```

- **Form Handling**
  - Collect form data using `$_GET` or `$_POST`.
  - Example:
    ```php
    $name = $_POST['name'];
    echo "Hello, $name!";
    ```

- **Validation and Sanitization**
  - Validate and sanitize input to ensure safety.
  - Example:
    ```php
    $name = htmlspecialchars($_POST['name']);
    ```

---

### 10. **File Handling**
- **Reading Files**
  - Open and read files using `fopen()`, `fread()`.
  - Example:
    ```php
    $file = fopen("file.txt", "r");
    echo fread($file, filesize("file.txt"));
    fclose($file);
    ```

- **Writing Files**
  - Write data to files using `fwrite()`.
  - Example:
    ```php
    $file = fopen("file.txt", "w");
    fwrite($file, "Hello World");
    fclose($file);
    ```

- **File Uploads**
  - Handle file uploads from forms.
  - Example:
    ```html
    <form action="upload.php" method="post" enctype="multipart/form-data">
      Select file: <input type="file" name="fileToUpload">
      <input type="submit" value="Upload">
    </form>
    ```

- **File Management**
  - Delete, rename, or copy files using `unlink()`, `rename()`, `copy()`.
  - Example:
    ```php
    unlink("file.txt"); // Deletes file
    ```

---

### 11. **Session Management**
- **Starting Sessions**
  - Start a session using `session_start()`.
  - Example:
    ```php
    session_start();
    $_SESSION['user'] = "John";
    ```

- **Storing Session Data**
  - Store data in sessions using `$_SESSION`.
  - Example:
    ```php
    $_SESSION['user'] = "John";
    echo $_SESSION['user']; // John
    ```

- **Destroying Sessions**
  - Destroy a session using `session_destroy

()`.
  - Example:
    ```php
    session_start();
    session_destroy();
    ```

---

### 12. **Cookies**
- **Setting Cookies**
  - Set cookies using `setcookie()`.
  - Example:
    ```php
    setcookie("user", "John", time() + (86400 * 30), "/");
    ```

- **Accessing Cookies**
  - Access cookies using `$_COOKIE`.
  - Example:
    ```php
    echo $_COOKIE['user']; // John
    ```

- **Deleting Cookies**
  - Delete a cookie by setting its expiration time to the past.
  - Example:
    ```php
    setcookie("user", "", time() - 3600, "/");
    ```

---

### 13. **Working with Databases**
- **Database Connections**
  - Connect to MySQL using MySQLi or PDO.
  - Example (MySQLi):
    ```php
    $conn = new mysqli("localhost", "username", "password", "database");
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }
    ```

- **CRUD Operations**
  - Create, Read, Update, Delete records.
  - Example (Read):
    ```php
    $sql = "SELECT id, name FROM users";
    $result = $conn->query($sql);
    while($row = $result->fetch_assoc()) {
      echo "id: " . $row["id"]. " - Name: " . $row["name"]. "<br>";
    }
    ```

- **Prepared Statements**
  - Use prepared statements to prevent SQL injection.
  - Example:
    ```php
    $stmt = $conn->prepare("SELECT * FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    ```

- **Transactions**
  - Handle database transactions.
  - Example:
    ```php
    $conn->begin_transaction();
    try {
      $conn->query("UPDATE accounts SET balance = balance - 100 WHERE id = 1");
      $conn->query("UPDATE accounts SET balance = balance + 100 WHERE id = 2");
      $conn->commit();
    } catch (Exception $e) {
      $conn->rollback();
    }
    ```

---

### 14. **Error Handling**
- **Error Types**
  - Notices, Warnings, and Fatal Errors.
  - Example:
    ```php
    echo $undefined_variable; // Notice
    ```

- **Custom Error Handling**
  - Define custom error handling functions.
  - Example:
    ```php
    function customError($errno, $errstr) {
      echo "Error: [$errno] $errstr";
    }
    set_error_handler("customError");
    ```

- **Exceptions**
  - Use `try...catch` blocks for exception handling.
  - Example:
    ```php
    try {
      if(!file_exists("file.txt")) {
        throw new Exception("File not found.");
      }
    } catch (Exception $e) {
      echo 'Caught exception: ',  $e->getMessage(), "\n";
    }
    ```

---

### 15. **Object-Oriented Programming (OOP)**
- **Classes and Objects**
  - Define classes and create objects.
  - Example:
    ```php
    class Car {
      public $color;
      public $model;
      
      public function __construct($color, $model) {
        $this->color = $color;
        $this->model = $model;
      }
      
      public function message() {
        return "My car is a " . $this->color . " " . $this->model . ".";
      }
    }

    $myCar = new Car("black", "Volvo");
    echo $myCar->message();
    ```

- **Properties and Methods**
  - Properties are variables, and methods are functions within a class.
  - Example:
    ```php
    class Dog {
      public $name;
      public function bark() {
        return "Woof!";
      }
    }
    ```

- **Inheritance**
  - One class can inherit the properties and methods of another.
  - Example:
    ```php
    class Animal {
      public $name;
    }

    class Dog extends Animal {
      public function bark() {
        return "Woof!";
      }
    }

    $dog = new Dog();
    echo $dog->bark(); // Woof!
    ```

- **Visibility**
  - `public`, `protected`, `private` determine the accessibility of properties/methods.
  - Example:
    ```php
    class Person {
      private $name;
      
      public function setName($name) {
        $this->name = $name;
      }
      
      public function getName() {
        return $this->name;
      }
    }

    $person = new Person();
    $person->setName("John");
    echo $person->getName(); // John
    ```

- **Static Methods and Properties**
  - Static members belong to the class, not objects.
  - Example:
    ```php
    class Math {
      public static function add($a, $b) {
        return $a + $b;
      }
    }
    echo Math::add(5, 10); // 15
    ```

---

### 16. **Security Practices**
- **Input Validation**
  - Validate input to ensure it meets expected criteria.
  - Example:
    ```php
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
      echo "Valid email address.";
    } else {
      echo "Invalid email address.";
    }
    ```

- **Password Hashing**
  - Hash passwords before storing them.
  - Example:
    ```php
    $hashedPassword = password_hash("mypassword", PASSWORD_DEFAULT);
    ```

- **Cross-Site Scripting (XSS) Prevention**
  - Use `htmlspecialchars()` to prevent XSS by escaping output.
  - Example:
    ```php
    echo htmlspecialchars($user_input);
    ```

- **Cross-Site Request Forgery (CSRF) Prevention**
  - Use tokens to protect against CSRF attacks.
  - Example:
    ```php
    session_start();
    $csrf_token = bin2hex(random_bytes(32));
    $_SESSION['csrf_token'] = $csrf_token;
    echo '<input type="hidden" name="csrf_token" value="'.$csrf_token.'">';
    ```

---

### 17. **JSON and XML**
- **JSON Encoding and Decoding**
  - Convert data to JSON with `json_encode()` and back with `json_decode()`.
  - Example:
    ```php
    $data = ["name" => "John", "age" => 30];
    $json = json_encode($data);
    $array = json_decode($json, true);
    ```

- **XML Parsing**
  - Parse XML using `simplexml_load_string()` or `DOMDocument`.
  - Example:
    ```php
    $xml = "<note><to>Tove</to><from>Jani</from></note>";
    $note = simplexml_load_string($xml);
    echo $note->to; // Tove
    ```

---

### 18. **HTTP and APIs**
- **Headers**
  - Use `header()` to set HTTP headers.
  - Example:
    ```php
    header("Location: /newpage.php");
    ```

- **cURL**
  - Make HTTP requests with cURL.
  - Example:
    ```php
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://example.com");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $output = curl_exec($ch);
    curl_close($ch);
    echo $output;
    ```

- **REST APIs**
  - Building and consuming RESTful APIs.
  - Example:
    ```php
    $data = json_encode(["name" => "John"]);
    $ch = curl_init("https://example.com/api/users");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
    $response = curl_exec($ch);
    curl_close($ch);
    echo $response;
    ```

---

### 19. **File Inclusion**
- **Including Files**
  - Use `include`, `require`, `include_once`, and `require_once` to include PHP files.
  - Example:
    ```php
    include 'header.php';
    ```

---

### 20. **Date and Time**
- **Date Functions**
  - Manipulate dates and times using `date()`, `time()`, `strtotime()`, and `DateTime`.
  - Example:
    ```php
    echo date("Y-m-d H:i:s");
    ```

---

